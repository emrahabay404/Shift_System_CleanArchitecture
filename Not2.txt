<h2>Dosya Yükle</h2>

<!-- Dosya Önizleme Alaný -->
<div id="filePreview" class="mb-3">
    <p>Dosya seçildiðinde burada önizleme gözükecek.</p>
</div>

<form id="uploadForm" enctype="multipart/form-data" style="display: flex; align-items: center;">
    <div class="form-group" style="display: flex; align-items: center;">
        <input type="file" style=" margin-right: 10px;" name="file" class="form-control" id="fileInput" accept="image/*,application/pdf" />
        <button type="button" class="btn btn-primary" onclick="uploadFile()">Yükle</button>
    </div>
</form>

<div id="message" class="mt-3"></div>


<form id="deleteFileForm" style="display: flex; align-items: center;">
    <input class="form-control" style="width: 20%; margin-right: 10px;" name="fileName" id="fileName" placeholder="Dosya adý ve uzantýsý" />
    <button type="submit" class="btn btn-danger">Sil</button>
</form>
<br />
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   $(document).ready(function () {
            $('#deleteFileForm').on('submit', function (e) {
                e.preventDefault(); // Sayfanýn yeniden yüklenmesini engelle

                // Form verisini al
                var fileName = $('#fileName').val();

                // AJAX isteði
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DeleteFile", "Home")', // Sunucuya istek yapýlacak URL
                    data: { fileName: fileName }, // Form verisi
                    success: function (response) {
                        // Baþarýlý olduðunda kullanýcýya mesaj göster
                        if (response.success) {
                            alert("Dosya baþarýyla silindi!");
                        } else {
                            alert("Hata: " + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert("Bir hata oluþtu: " + error);
                    }
                });
            });
        });
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         [HttpPost]
        public IActionResult DeleteFile(string fileName)
        {
            // Uygulamanýn kök dizinine 'wwwroot/uploads' klasörünü ekleyelim
            var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");

            // Gelen dosya adýný kontrol edelim ve loglayalým
            Console.WriteLine($"Silinmek istenen dosya adý: {fileName}");

            // Dosya uzantýsýzsa dizindeki tüm dosyalar arasýnda arama yapalým
            var filesInDirectory = Directory.GetFiles(folderPath);
            string fullFilePath = null;

            // Uzantýsýz dosya adýný bul ve eþleþen dosyayý tespit et
            foreach (var file in filesInDirectory)
            {
                var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(file);
                if (fileNameWithoutExtension.Equals(fileName, StringComparison.OrdinalIgnoreCase))
                {
                    fullFilePath = file;  // Eþleþen dosya bulundu
                    break;
                }
            }

            // Eþleþen dosya bulunamazsa, dosya mevcut deðil
            if (fullFilePath == null)
            {
                Console.WriteLine("Dosya bulunamadý.");
                return Json(new { success = false, message = $"Dosya bulunamadý: {fileName}" });
            }

            // Servis aracýlýðýyla dosyayý silme iþlemini gerçekleþtirelim
            var fileNameWithExtension = Path.GetFileName(fullFilePath); // Uzantýlý dosya adýný alalým
            bool result = _fileUploadService.DeleteFile(folderPath, fileNameWithExtension);

            if (result)
            {
                return Json(new { success = true, message = "Dosya baþarýyla silindi!" });
            }

            return Json(new { success = false, message = $"Dosya silinemedi: {fileNameWithExtension}" });
        }
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          [HttpPost]
        public async Task<JsonResult> Upload(IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                return Json(new { success = false, message = "Dosya seçilmedi." });
            }

            // Yükleme yapýlacak klasör
            var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/uploads");

            try
            {
                // Servis ile dosya yükleme iþlemini gerçekleþtir
                var filePath = await _fileUploadService.UploadFileAsync(file, folderPath);

                if (string.IsNullOrEmpty(filePath))
                {
                    return Json(new { success = false, message = "Dosya yüklenemedi." });
                }

                return Json(new { success = true, message = "Dosya baþarýyla yüklendi!" });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = "Dosya yükleme hatasý: " + ex.Message });
            }
        }


        $(document).ready(function () {


    $("#multi-filter-select").DataTable({
        pageLength: 5,
        initComplete: function () {
            this.api()
                .columns()
                .every(function () {
                    var column = this;
                    var select = $(
                        '<select class="form-select"><option value=""></option></select>'
                    )
                        .appendTo($(column.footer()).empty())
                        .on("change", function () {
                            var val = $.fn.dataTable.util.escapeRegex($(this).val());

                            column
                                .search(val ? "^" + val + "$" : "", true, false)
                                .draw();
                        });

                    column
                        .data()
                        .unique()
                        .sort()
                        .each(function (d, j) {
                            select.append(
                                '<option value="' + d + '">' + d + "</option>"
                            );
                        });
                });
        },
    });

});

// Dosya Seçildiðinde Önizleme Gösterme
$('#fileInput').on('change', function () {
    var file = this.files[0];
    var preview = $('#filePreview');

    if (file) {
        var reader = new FileReader();
        reader.onload = function (e) {
            var fileType = file.type;
            preview.empty(); // Önizleme alanýný temizle

            // Resim Dosyasý Ýçin Önizleme
            if (fileType.startsWith('image/')) {
                var img = $('<img />', {
                    src: e.target.result,
                    width: '200px',
                    class: 'img-thumbnail'
                });
                preview.append(img);
            }
            // PDF Dosyasý Ýçin Önizleme
            else if (fileType === 'application/pdf') {
                var pdfEmbed = $('<embed />', {
                    src: e.target.result,
                    type: 'application/pdf',
                    width: '100%',
                    height: '500px'
                });
                preview.append(pdfEmbed);
            }
            // Diðer Dosya Türleri Ýçin Bilgi Mesajý
            else {
                preview.append('<p>Bu dosya türü için önizleme desteklenmiyor: ' + fileType + '</p>');
            }
        };
        reader.readAsDataURL(file);
    }
});

// Dosya Yükleme Ýþlemi
function uploadFile() {
    var formData = new FormData();
    var fileInput = $('#fileInput')[0].files[0];

    // Maksimum dosya boyutu (5 MB) ve izin verilen dosya türleri
    var maxFileSize = 5 * 1024 * 1024; // 5 MB
    var allowedFileTypes = ['image/jpeg', 'image/png', 'application/pdf']; // Ýzin verilen dosya türleri

    // Dosya kontrolü
    if (!fileInput) {
        $('#message').html('<div class="alert alert-danger">Lütfen bir dosya seçin.</div>');
        scrollToTop();
        return;
    }

    // Dosya boyut kontrolü
    if (fileInput.size > maxFileSize) {
        $('#message').html('<div class="alert alert-danger">Dosya boyutu 5 MB\'ý aþýyor.</div>');
        scrollToTop();
        resetForm(); // Form ve önizlemeyi sýfýrlama iþlemi
        return;
    }

    // Dosya türü kontrolü
    if (!allowedFileTypes.includes(fileInput.type)) {
        $('#message').html('<div class="alert alert-danger">Sadece JPEG, PNG ve PDF dosya türlerine izin veriliyor.</div>');
        scrollToTop();
        return;
    }

    formData.append('file', fileInput);

    $.ajax({
        url: '/Home/Upload/',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
            if (response.success) {
                $('#message').html('<div class="alert alert-success">' + response.message + '</div>');
                resetForm(); // Form ve önizlemeyi sýfýrlama iþlemi
                scrollToTop(); // Sayfanýn en üstüne kaydýr
            } else {
                $('#message').html('<div class="alert alert-danger">' + response.message + '</div>');
                scrollToTop();
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            $('#message').html('<div class="alert alert-danger">Bir hata oluþtu: ' + textStatus + '</div>');
            scrollToTop();
        }
    });

}

// Form ve Önizleme Alanýný Sýfýrlama Ýþlemi
function resetForm() {
    $('#fileInput').val(''); // Dosya giriþini sýfýrla
    $('#filePreview').html('<p>Dosya seçildiðinde burada önizleme gözükecek.</p>'); // Önizleme alanýný sýfýrla
}

// Sayfanýn En Üstüne Kaydýrma Ýþlemi
function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
}
